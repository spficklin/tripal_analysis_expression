<?php
/**
 * @file
 * Functions used to install the analysis: expression module.
 */

/**
 * Implements hook_requirements().
 *
 * @ingroup tripal_biomaterial
 */
function tripal_biomaterial_requirements($phase) {
  $requirements = [];
  if ($phase == 'install') {
    // Make sure chado is installed.
    if (!$GLOBALS["chado_is_installed"]) {
      $requirements['tripal_biomaterial'] = [
        'title' => "tripal_biomaterial",
        'value' => "ERROR: Chado must be installed before this module can be enabled",
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }
  return $requirements;
}

/**
 * Implements install_hook().
 *
 * Permforms actions when the module is first installed.
 *
 * @ingroup tripal_analysis_module
 */
function tripal_biomaterial_install() {

  // Get localization function for installation.
  $t = get_t();


  tripal_biomaterial_add_cvs();
  tripal_biomaterial_add_cvterms();
  tripal_biomaterial_update_prop_terms();

  // Make sure the  biomaterial, table is  set
  // as base tables. This allows the tables to be used as base tables in
  // Drupal Views.
  $update = db_update('tripal_views')->fields([
    'base_table' => 1,
  ])->condition('table_name', 'biomaterial', '=')->execute();

  //Add cvalue_id if not already present in biomateiralprop
  tripal_biomaterial_update_7301();
}


/**
 * Add controlled vocabulary terms used by the biomaterials module.
 *
 * @ingroup tripal_biomaterial
 */
function tripal_biomaterial_add_cvs() {
  // CVs for the biomaterial content type.
  tripal_insert_cv('biomaterial_property', 'Contains property terms for biomaterials.');
  tripal_insert_cv('biomaterial_relationship', 'Contains types of relationships between biomaterials.');
  tripal_insert_cv('NCBI Biosample Attributes', 'Attributes describe a BioSample using structured attribute name:value pairs, for example, tissue:liver. BioSample maintains a list of recognized attributes which participate in one or more BioSample packages. In addition to recognized attributes, submitters may provide any number of custom attributes to fully describe a sample.');
  tripal_insert_db([
    'name' => 'NCBI_BioSample',
    'description' => 'This database provides, in XML format, the listing of attribute names for biosmaples housed in NCBI.',
    'url' => 'https://www.ncbi.nlm.nih.gov/biosample/docs/attributes',
    'urlprefix' => 'https://www.ncbi.nlm.nih.gov/biosample/docs/attributes#'
  ]);
}

/**
 * Implements hook_schema().
 *
 * This function implements the hook schema for biomaterial content type.
 *
 * @ingroup tripal_biomaterial
 */
function tripal_biomaterial_schema() {
  $schema = [];
  if (!db_table_exists('chado_biomaterial')) {
    $schema['chado_biomaterial'] = [
      'fields' => [
        'vid' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ],
        'nid' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ],
        'biomaterial_id' => [
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ],
      ],
      'indexes' => [
        'biomaterial_id' => ['biomaterial_id'],
      ],
      'unique keys' => [
        'nid_vid' => ['nid', 'vid'],
        'vid' => ['vid'],
      ],
      'primary key' => ['nid'],
    ];
  }

  return $schema;
}

/**
 * Add cvterms related to the analysis: expression module.
 *
 * @ingroup tripal_biomaterial
 */
function tripal_biomaterial_add_cvterms() {

  // Insert the basic biomaterialprop types. These types are used in the NCBI
  // BioSample database.
  tripal_insert_cvterm([
    'name' => 'sample_name',
    'def' => 'Sample Name is a name that you choose for the sample. It can have any format, but we suggest that you make it concise, unique and consistent within your lab, and as informative as possible. Every Sample Name from a single Submitter must be unique.',
    'cv_name' => 'biomaterial_property',
    'db_name' => 'local',
  ]);

  tripal_insert_cvterm([
    'name' => 'sample_title',
    'def' => 'Title of the sample.',
    'cv_name' => 'biomaterial_property',
    'db_name' => 'local',
  ]);

  tripal_insert_cvterm([
    'name' => 'bioproject_accession',
    'def' => 'The accession number of the NCBI BioProject to which the BioSample
      belongs.  A valid BioProject accession has prefix PRJN, PRJE or PRJD, e.g., PRJNA12345.',
    'cv_name' => 'biomaterial_property',
    'db_name' => 'local',
  ]);

  tripal_insert_cvterm([
    'name' => 'biosample_accession',
    'def' => 'The accession number of the NCBI Biosample.',
    'cv_name' => 'biomaterial_property',
    'db_name' => 'local',
  ]);

  tripal_insert_cvterm([
    'name' => 'organism',
    'def' => 'The most descriptive organism name for this sample (to the species, if relevant).',
    'cv_name' => 'biomaterial_property',
    'db_name' => 'local',
  ]);
}


/**
 * Implements hook_uninstall().
 *
 * @ingroup tripal_biomaterial
 */
function tripal_biomaterial_uninstall() {

}


/**
 * Correct cases where the ncbi biosample accession was inserted into
 * biomaterial.dbxref_id instead of added as a true dbxref
 *
 */
function tripal_biomaterial_update_7300() {
  $sql = "SELECT * FROM {biomaterial}";
  $results = chado_query($sql);
  foreach ($results as $result) {

    if ($result->dbxref_id) {
      $sql = "SELECT DB.name, DBX.accession FROM {dbxref} DBX
        INNER JOIN {db} DB ON  DBX.db_id = db.db_id
        WHERE DBX.dbxref_id = :dbxref_id";

      $dbxref = chado_query($sql, [":dbxref_id" => $result->dbxref_id])->fetchObject();
      if ($dbxref->name == "NCBI BioSample") {
        $biomaterial_id = $result->biomaterial_id;
        $ncbi_accession = $dbxref->accession;

        tripal_associate_dbxref('biomaterial', $biomaterial_id, [
          'accession' => $ncbi_accession,
          'db_name' => 'NCBI BioSample',
        ]);
      }
    }
  }
}

/**
 * Updates the biomaterialprop table to support cvterm target values
 */
function tripal_biomaterial_update_7301() {
  if (!chado_column_exists('biomaterialprop', 'cvalue_id')) {
    chado_query("ALTER TABLE {biomaterialprop} ADD COLUMN cvalue_id bigint");
    chado_query("ALTER TABLE {biomaterialprop} ADD CONSTRAINT biomaterialprop_cvalue_id_fkey FOREIGN KEY (cvalue_id) REFERENCES {cvterm} (cvterm_id) ON DELETE SET NULL;");
  }
}

/**
 * Adds the NCBI biomaterial database and adds the terms to it.  Also moves
 * terms from the tripal vocabulary into local.
 */
function tripal_biomaterial_update_7302() {
  try {
    // Add the new CV and DB records
    tripal_insert_cv('NCBI Biosample Attributes', 'Attributes describe a BioSample using structured attribute name:value pairs, for example, tissue:liver. BioSample maintains a list of recognized attributes which participate in one or more BioSample packages. In addition to recognized attributes, submitters may provide any number of custom attributes to fully describe a sample.');
    tripal_insert_db([
      'name' => 'NCBI_BioSample',
      'description' => 'This database provides, in XML format, the listing of attribute names for biosmaples housed in NCBI.',
      'url' => 'https://www.ncbi.nlm.nih.gov/biosample/docs/attributes',
      'urlprefix' => 'https://www.ncbi.nlm.nih.gov/biosample/docs/attributes#'
    ]);

    // Create new dbxref's for the biomaterial property t erms and
    // swap out the dbxref_id for the terms in the cv table to use these.
    $local_db = new ChadoRecord('db');
    $local_db->setValues(['name' => 'local']);
    $local_db->find();

    $biomprop_cv = new ChadoRecord('cv');
    $biomprop_cv->setValues(['name' => 'biomaterial_property']);
    $biomprop_cv->find();

    // Iterate through each of the terms and swap the dbxrefs.
    $names = ['organism', 'sample_name', 'sample_title', 'bioproject_accession'];
    foreach ($names as $name) {


      $dbxref = new ChadoRecord('dbxref');
      $dbxref->setValues([
        'accession' => $name,
        'db_id' => $local_db->getID(),
      ]);
      if (!$dbxref->find()) {
        $dbxref->insert();
      }

      $cvterm = new ChadoRecord('cvterm');
      $cvterm->setValues([
        'name' => $name,
        'cv_id' => $biomprop_cv->getID(),
      ]);
      if ($cvterm->find()) {
        $cvterm->setValue('dbxref_id', $dbxref->getID());
        $cvterm->update();
      }
    }

    tripal_biomaterial_update_prop_terms();

  }
  catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not perform update: '. $error);
  }
}
